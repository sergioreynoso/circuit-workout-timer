// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workouts      Workout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workout {
  id           String      @id @default(cuid())
  workout_name String      @db.VarChar(50)
  set_count    Int         @default(0)
  display_seq  Int         @default(autoincrement())
  set_rest     Int         @default(0)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  activities    Activity[]
}

model Activity {
  id            String   @id @default(cuid())
  activity_name String   @db.VarChar(50)
  type          Type     @default(WORK)
  duration      Int      @default(0)
  display_seq   Int      @default(autoincrement())
  workout       Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId     String
}

enum Type {
  WORK
  REST
}